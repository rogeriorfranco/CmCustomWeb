using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Device.Location;
using CmCustomDto;
using System.Net;
using System.Xml;
using SignUrl;

public static class Utility
{
    /// <summary>
    /// Método de paginação do gridview
    /// </summary>
    /// <param name="gridView">passar o nome do gridview</param>
    /// <param name="e"></param>
    /// <param name="dt">fonte de dados</param>
    public static void PaginacaoGridView(GridView gridView, GridViewPageEventArgs e, object dt)
    {
        gridView.DataSource = dt;
        gridView.PageIndex = e.NewPageIndex;
        gridView.DataBind();
    }

    public static void Alertbootsrap(string msg, Page page, UpdatePanel up)
    {
        try
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.AppendLine("$(document).ready(function() {");
            sb.AppendLine("$('.modal-body #modalId').html('" + msg + "') ");
            sb.AppendLine("$('#myModal').modal('show');");
            sb.AppendLine(" });");
            UserControl uc = (UserControl)page.LoadControl("~/UserControls/UserControlAlertBootstrap.ascx");
            up.ContentTemplateContainer.Controls.Add(uc);
            ScriptManager.RegisterClientScriptBlock(page, typeof(Page), Guid.NewGuid().ToString(), sb.ToString(), true);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public static void AlertbootsrapConfirm(string msg, Page page, UpdatePanel up)
    {
        try
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.AppendLine("$(document).ready(function() {");
            sb.AppendLine("$('.modal-body #modalId').html('" + msg + "') ");
            sb.AppendLine("$('#myModal').modal('show');");
            sb.AppendLine(" });");
            ScriptManager.RegisterClientScriptBlock(page, typeof(Page), Guid.NewGuid().ToString(), sb.ToString(), true);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public static void ExportarDataTableExcel(object dt, string nomeArquivo)
    {
        HttpResponse response = HttpContext.Current.Response;
        response.Clear();
        response.AddHeader("content-disposition", "attachment;filename=" + nomeArquivo + ".xls");
        response.ContentType = "application/vnd.ms-excel";
        using (StringWriter stringWrite = new StringWriter())
        {
            using (HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite))
            {
                DataGrid dg = new DataGrid();
                dg.DataSource = dt;
                dg.DataBind();
                dg.RenderControl(htmlWrite);
            }
            response.Write(stringWrite.ToString());
            response.End();
        }
    }

    public static void ExportDataTableCsv(DataTable dt, string nomeArquivo)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine(string.Join(",", dt.Columns.Cast<DataColumn>()
            .Select(col => "\"" + col.ColumnName + "\"")));

        dt.AsEnumerable().Select(row => sb.AppendLine(
            string.Join(",", row.ItemArray.Select(field => string.Concat("\"", Regex.Replace(field.ToString(), "(\n|\r)+", ""), "\""))))).ToList();

        HttpResponse response = HttpContext.Current.Response;
        response.Clear();
        response.AddHeader("content-disposition", "attachment;filename=" + nomeArquivo + ".csv");
        response.ContentType = "application/csv";
        response.Write(sb.ToString());
        response.End();
    }

    private static string withAccents = "áàâäãåçéèêëíìîïñóòôöõúùûüýÿÁÀÂÄÃÅÇÉÈÊËÍÌÎÏÑÓÒÔÖÕÚÙÛÜÝ";
    private static string withoutAccents = "aaaaaaceeeeiiiinooooouuuuyyAAAAAACEEEEIIIINOOOOOUUUUY";
    private static CultureInfo cultureInfoUS = new CultureInfo("en-US");

    public static CultureInfo GetCultureInfoUS()
    {
        return cultureInfoUS;
    }

    public static string parImpar(int numero)
    {
        if (numero % 2 == 0)
            return "PAR";

        if (numero % 2 == 1)
            return "IMPAR";

        return "";
    }

    public static string RemoveAccents(this string str)
    {
        if (str == null)
        {
            return null;
        }

        string retorno = "";

        foreach (Char ch in str)
        {
            int index = -1;
            retorno += ((index = withAccents.IndexOf(ch)) >= 0) ? withoutAccents[index] : ch;
        };

        return retorno;
    }

    public static double GetDistance(double latOrigin, double lngOrigin, double latDestiny, double lngDestiny)
    {
        GeoCoordinate geoCoordinateOrigin = new GeoCoordinate();
        GeoCoordinate geoCoordinateDestiny = new GeoCoordinate();

        geoCoordinateOrigin.Latitude = latOrigin;
        geoCoordinateOrigin.Longitude = lngOrigin;
        geoCoordinateOrigin.Altitude = 0.0;

        geoCoordinateDestiny.Latitude = latDestiny;
        geoCoordinateDestiny.Longitude = lngDestiny;
        geoCoordinateDestiny.Altitude = 0.0;

        return geoCoordinateOrigin.GetDistanceTo(geoCoordinateDestiny);
    }

    public static CoordenadasLatLong GetCoordenadasFromEndereco(string logradouro, string numero, string bairro, string cidade, string uf)
    {
        CoordenadasLatLong cLatLong = new CoordenadasLatLong();
        string endereco = logradouro + " " + numero + "," + (!bairro.Equals("NULL") ? bairro : "") + "," + cidade + "," + uf;

        var query = HttpUtility.ParseQueryString(string.Empty);
        query["address"] = endereco;
        query["sensor"] = "false";
        query["client"] = "gme-algartelecom";
        string keyString = "ymljBZwlp1jQfyR15tgT2TbM80k=";
        string queryString = query.ToString();
        string googleCoordenadasURI = GoogleSignedUrl.Sign("http://maps.googleapis.com/maps/api/geocode/xml?" + queryString, keyString);

        HttpWebRequest request = WebRequest.Create(googleCoordenadasURI) as HttpWebRequest;
        HttpWebResponse response = request.GetResponse() as HttpWebResponse;

        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.Load(response.GetResponseStream());

        string status = xmlDoc.SelectSingleNode("//GeocodeResponse/status").InnerText;

        if (status.Equals("OK"))
        {
            string location_type = xmlDoc.SelectSingleNode("//GeocodeResponse/result/geometry/location_type").InnerText;

            if (location_type.Equals("ROOFTOP") || location_type.Equals("RANGE_INTERPOLATED"))
            {
                string gNumero = xmlDoc.SelectSingleNode("//GeocodeResponse/result[1]/address_component[type='street_number']/long_name").InnerText;
                if (!numero.Equals(gNumero))
                {
                    if (bairro.Equals("NULL") || bairro.Equals(""))
                    {
                        return null;
                    }
                    else
                    {
                        return GetCoordenadasFromEndereco(logradouro, numero, "", cidade, uf);
                    }
                }

                string lat = xmlDoc.SelectSingleNode("//GeocodeResponse/result/geometry/location/lat").InnerText;
                string lng = xmlDoc.SelectSingleNode("//GeocodeResponse/result/geometry/location/lng").InnerText;
                cLatLong.setLatitude(lat);
                cLatLong.setLongitude(lng);
                cLatLong.setLocationType(location_type);
            }
            else
            {
                // nao foi possivel encontrar localizacao precisa - retorna nulo
                throw new Exception("Analise nao confiavel. Location_type=" + location_type);
            }

        }
        else
        {
            // erro na chamada da google api - TO DO: avaliar levantamento de exceção
            throw new Exception("Falha na chamada do google. Status=" + status);
        }

        return cLatLong;
    }
}
