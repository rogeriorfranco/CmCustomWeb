using CmCustomDal;
using CmCustomDto;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CmCustomBll
{
    public class OperationsCmApiBll
    {
        IOperationsCmApiDal operationsCmAPI = new OperationsCmApiDal();
        public void atualizaFacilidades(int compPointID, string circuito, string status, Olt olt, Facility facility, string acao)
        {
            try
            {
                IFacilityHistoricDal facilityHistoricDal = new FacilityHistoricDal();
                if (acao.Equals("SALVAR"))
                {
                    if (status.Equals("OCUPADO") && string.IsNullOrEmpty(olt.serial.Trim()))
                        throw new Exception("O preenchimento do serial é obrigatório para o status OCUPADO");

                    if (olt.idSubPorta == 0)
                    {
                        IFacilityDal facilityDal = new FacilityDal();
                        olt.idSubPorta = facilityDal.getIdSubPortaVagoByPorta(olt.idComponent);
                        if (olt.idSubPorta == 0)
                            throw new Exception("Circuito registrado apenas na CTO, sem sub porta disponivel na " + olt.nome);
                    }

                    operationsCmAPI.atualizaPontoCompoment(compPointID, circuito, status);
                    operationsCmAPI.atualizaAtributosPortaOLT(olt);
                    facilityHistoricDal.save(facility);
                    throw new Exception("Facilidades alteradas");
                }

                if (acao.Equals("LIBERAR"))
                {
                    operationsCmAPI.atualizaPontoCompoment(compPointID, string.Empty, "VAGO");
                    operationsCmAPI.atualizaAtributosPortaOLT(clearOlt(olt));
                    facilityHistoricDal.save(clearfacility(facility));
                    throw new Exception("Facilidades liberadas");
                }

            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }


        }


        private Olt clearOlt(Olt olt)
        {
            olt.status = "VAGO";
            olt.circuito = string.Empty;
            olt.cliente = string.Empty;
            olt.banda_mb = "0";
            olt.banda_uplink = "0";
            olt.serial = string.Empty;
            olt.produto = string.Empty;
            olt.bairro = string.Empty;
            olt.nro_lote = "0";
            olt.compl_nivel_1 = string.Empty;
            olt.compl_nivel_1_descricao = string.Empty;
            olt.compl_nivel_2 = string.Empty;
            olt.compl_nivel_2_descricao = string.Empty;
            olt.compl_nivel_3 = string.Empty;
            olt.compl_nivel_3_descricao = string.Empty;
            olt.validade_reserva = string.Empty;
            return olt;
        }

        private Facility clearfacility(Facility facility)
        {
            facility.circuito_novo = string.Empty;
            facility.status_novo = string.Empty;
            facility.cliente_novo = string.Empty;
            facility.produto_novo = string.Empty;
            facility.banda_mb_novo = string.Empty;
            facility.banda_uplink_novo = string.Empty;
            facility.ont_id_novo = string.Empty;
            facility.serial_novo = string.Empty;
            facility.vlan_inner_novo = string.Empty;
            facility.vlan_novo = string.Empty;
            facility.validade_reserva_novo = string.Empty;
            return facility;
        }



    }
}
